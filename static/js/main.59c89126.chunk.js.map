{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","component/TodoEntry.js","component/Filters.js","component/TodoItem.js","component/TodoItems.js","component/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","_this","this","Object","classCallCheck","toggle","action","eliminate","todos","splice","editID","itemCount","count","clearButton","clear","extendObservable","TodoStore","addTodo","push","lastID","TodoEntry","state","value","handleKeyDown","events","preventDefault","setState","_this2","react_default","a","createElement","className","onChange","event","target","onKeyDown","keyCode","type","placeholder","Component","Filters","v","map","todo","props","observer","TodoItem","onToggle","onEliminate","counter","aaa","checked","component_Filters","onClick","TodoItems","cases","component_TodoItem","TodoFooter","clearer","b","button","stateOf","App","states","default","t","log","console","component_TodoFooter","component_TodoEntry","component_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59c89126.chunk.js","sourcesContent":["import { observabel, action, extendObservable } from \"mobx\";\n\nexport default class TodoModel {\n  constructor(store, title, completed, id) {\n    //   this.store=store\n\n    extendObservable(this, {\n      store: store,\n      id: id,\n      title: title,\n      completed: completed\n    });\n  }\n\n  toggle = action(() => {\n    this.completed = !this.completed;\n  });\n  eliminate = action(() => {\n    this.store.todos.splice(this.id , 1);\n  });\n  editID = action(id => {\n    this.id = id;\n  });\n  itemCount = action(count => {\n    if (this.completed === false) count++;\n    return count;\n  });\n  clearButton = action(count => {\n    if (this.completed === true) count++;\n    return count;\n  });\n  clear = action(() => {\n    if (this.completed === true) this.store.todos.splice(this.id , 1);\n    //console.log(this.id)\n  });\n}\n","import { observabel, action, extendObservable } from \"mobx\";\nimport TodoModel from \"./TodoModel.js\";\n\nclass TodoStore {\n  constructor() {\n    extendObservable(this, {\n      todos: []\n    });\n    this.lastID = 0;\n}\n\n\n  addTodo = action(title => {\n    //console.log(this.lastID)\n    this.todos.push(new TodoModel(this, title, false, this.lastID));\n    this.lastID++;\n\n  });\n  \n}\n\nconst store = new TodoStore();\nexport default store;\n","import React, { Component } from \"react\";\nimport TodoStore from '../stores/TodoStore'\n\n\nclass TodoEntry extends Component {\n  state={\n    value:''\n  }\n\n  handleKeyDown = events =>{\n    \n    events.preventDefault()\n    TodoStore.addTodo(this.state.value)\n    this.setState({\n      value:''\n    })\n  }\n  render() {\n    return (\n      <div>\n        <header className=\"header\">\n          <h1> todo </h1>\n          <input\n          value={this.state.value}\n          onChange={event=>this.setState({value:event.target.value}) }\n          onKeyDown={event=>{\n            if(event.keyCode == 13)\n              this.handleKeyDown(event)\n\n          }}\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"what needs to be done?\"\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default TodoEntry;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport TodoStore from \"../stores/TodoStore\";\nclass Filters extends Component {\n  render() {\n    var v = 0;\n    var count = 0;\n    var clear=0\n    return (\n      <div>\n        { TodoStore.todos.map(todo => {\n          clear= todo.clearButton(clear)\n          if(clear !=0)\n            this.props.clearButton(true)\n            else\n            this.props.clearButton(false)\n\n          count = todo.itemCount(count);\n          todo.editID(v);\n          v++;\n\n        })}\n        {this.props.count(count)}\n        {}\n      </div>\n    );\n  }\n}\n\nexport default observer(Filters);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Filters from \"./Filters\";\nimport App from \"../App\";\nclass TodoItem extends Component {\n  state = { count: 0 };\n  \n  onToggle = () => {\n    this.props.todo.toggle();\n    this.setState({ count: this.state.count - 1 });\n    \n  };\n  onEliminate = () => {\n    this.props.todo.eliminate();\n    this.props.counter(0);\n  };\n  clear = () => {\n    if (this.props.aaa === true) this.props.todo.clear();\n    this.props.counter(0);\n  };\n  counter = count => {\n    if (this.state.count !== count) this.setState({ count: count });\n    this.props.counter(this.state.count);\n  };\n  render() {\n    const { todo } = this.props;\n    return (\n      <div>\n        <li className={todo.completed ? \"completed\" : \"\"}>\n          <div className=\"view\">\n            <input\n              onChange={this.onToggle}\n              type=\"checkbox\"\n              className=\"toggle\"\n              value=\"on\"\n              checked={todo.completed}\n            />\n            <label>{todo.title}</label>\n            <Filters count={this.counter} clearButton={this.props.clearButton}/>\n\n            <button className=\"destroy\" onClick={this.onEliminate} />\n\n            {this.clear()}\n          </div>\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default observer(TodoItem);\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TodoStore from \"../stores/TodoStore\";\nimport { observer } from \"mobx-react\";\nclass TodoItems extends Component {\n  render() {\n    return (\n      <div>\n        <section className=\"main\">\n          <ul className=\"todo-list\">\n            {TodoStore.todos.map(todo => {\n              if (this.props.cases === \"Completed\") {\n                if (todo.completed !== false)\n                  return (\n                    <TodoItem\n                      todo={todo}\n                      aaa={this.props.clear}\n                      counter={this.props.counter}\n                      clearButton={this.props.clearButton}\n                    />\n                  );\n              }\n              if (this.props.cases === \"Active\") {\n                if (todo.completed !== true)\n                  return (\n                    <TodoItem\n                      todo={todo}\n                      aaa={this.props.clear}\n                      counter={this.props.counter}\n                      clearButton={this.props.clearButton}\n                    />\n                  );\n              }\n              if (this.props.cases === \"All\")\n                return (\n                  <TodoItem\n                    todo={todo}\n                    aaa={this.props.clear}\n                    counter={this.props.counter}\n                    clearButton={this.props.clearButton}\n                  />\n                );\n            })}\n          </ul>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default observer(TodoItems);\n","import React, { Component } from \"react\";\nimport {observer} from 'mobx-react'\nimport TodoStore from '../stores/TodoStore'\nimport Filters from './Filters'\nclass TodoFooter extends Component {\n    \n    clear=()=>{\n       this.props.clearer(true)\n            }\n  render() {\n    var b;\n    if (this.props.button == true  )\n      b=<div className='clear-completed' onClick={()=>{this.clear()}}>\n      clear component\n    </div>\n  return (\n    \n    <div className=\"footer\">\n    <li className=\"todo-count strong\">{this.props.count} list Item </li>   \n    <div className=\"filters\">\n    <li >\n    <a onClick={()=>{ this.props.stateOf('All')} }  >All</a>\n    <a onClick={()=>{ this.props.stateOf('Active')}  } >Active</a> \n    <a onClick={()=>{ this.props.stateOf('Completed')}  }>completed</a>         \n      </li>   \n    </div>\n   {b}\n             \n              </div>\n                \n    \n    );\n  }\n}\n\nexport default observer(TodoFooter)\n","import React, { Component } from \"react\";\nimport TodoEntry from \"./component/TodoEntry\";\nimport TodoItems from \"./component/TodoItems\";\nimport TodoFooter from \"./component/TodoFooter\";\nimport TodoStore from \"./stores/TodoStore\";\n\nclass App extends Component {\n  state = {\n    cases: \"All\",\n    count: 0,\n    button:false\n  };\n\n  stateOf = states => {\n    switch (states) {\n      case \"Completed\":\n        this.setState({\n          cases: \"Completed\"\n        });\n        break;\n\n      case \"Active\":\n        this.setState({\n          cases: \"Active\"\n        });\n        break;\n\n      case \"All\":\n        this.setState({\n          cases: \"All\"\n        });\n        break;\n    }\n  };\n\n  clearer = clear => {\n    this.setState({ clear: clear });\n  };\n  default = () => {\n    if (this.state.clear === true) this.setState({ clear: false });\n  };\n\n  counter = count => {\n    if (this.state.count !== count) this.setState({ count: count });\n  };\n  clearButton = t =>{\n    this.setState({button:t})\n  };\n\n  render() {\n    var log;\n    console.log(this.state.count)\n    if (typeof TodoStore.todos[0] !== \"undefined\" || this.state.count !== 0) {\n      log = (\n        <TodoFooter\n          stateOf={this.stateOf}\n          clearer={this.clearer}\n          count={this.state.count}\n          button={this.state.button}\n\n        />\n      );\n    }\n     \n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n        <TodoItems\n          cases={this.state.cases}\n          clear={this.state.clear}\n          counter={this.counter}\n          clearButton={this.clearButton}\n        />\n        {log}\n        {this.default()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}